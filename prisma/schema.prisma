datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // For credentials auth
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  createdAt     DateTime      @default(now())
  Transaction   Transaction[]
}

model Portfolio {
  id           String        @id @default(cuid())
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  label        String        @default("Mon portefeuille")
  positions    Position[]
  snapshots    Snapshot[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Position {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  chain       String
  asset       String
  // SQLite: pas de native Decimal(36,18) -> on garde Decimal générique (fallback) ou Float si problème
  amount      Decimal
  source      String
  updatedAt   DateTime  @updatedAt

  @@unique([portfolioId, asset], name: "uniq_portfolio_asset")
}

model Snapshot {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  nav         Decimal
  vsCurrency  String    @default("USD")
  // SQLite ne supporte pas Json: on stocke sérialisé
  data        String?
  createdAt   DateTime  @default(now())
}

// Transaction ledger (historique détaillé par actif)
// type: "BUY"|"SELL"|"DEPOSIT"|"WITHDRAW"|"AIRDROP"|"FEE"|"ADJUST"
model Transaction {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  userId      String // denormalisé pour requêtes rapides par user
  user        User      @relation(fields: [userId], references: [id])
  assetId     String // canonical (ex: bitcoin)
  type        String // valeurs contrôlées applicativement
  quantity    Decimal // toujours positive (sens via type)
  price       Decimal? // prix unitaire USD (optionnel)
  note        String? // commentaire libre
  meta        String? // JSON sérialisé si besoin
  createdAt   DateTime  @default(now())

  @@index([userId, assetId, createdAt])
  @@index([portfolioId, assetId, createdAt])
  @@index([assetId, createdAt])
}

// ------- NextAuth standard models -------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
